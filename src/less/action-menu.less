#action-menu {
	position: fixed;
	bottom: 0;
	right: 0;
}

#action-button {
	position: relative;
	.rotate(0deg);
	.transition(~"all .5s ease-in-out, opacity 1s linear");
	cursor: pointer;
	&:not(.show-action-button){
		opacity: 0;
		right: -100%;
	}
	&.show-action-button {
		.transition-delay(4.2s);
		.transition-timing(cubic-bezier(0.250, 0.460, 0.450, 0.940));
		opacity: 1;
		right: -10px;
	}

	nav {
		opacity: .69;
		.transition(.5s);
		&.opened,
		&:hover {
			opacity: 1;
		}
	}

}
#action-button-container {
	position: relative;
	top: -18vh;
	left: -32vw;


	.menu {
		-webkit-filter: url("resources/svg/shadowed-goo.svg#shadowed-goo");
		filter: url("resources/svg/shadowed-goo.svg#shadowed-goo");
	}

	@menuButtonSize: 69px;
	.menu-item,
	.menu-open-button {
		background: @mid-blue;
		border-radius: 100%;
		width: @menuButtonSize;
		height: @menuButtonSize;
		line-height: @menuButtonSize;
		color: @light-blue;
		position: absolute;
		text-align: center;
		.transform(translate3d(0, 0, 0));
		transition: transform ease-out 200ms, -webkit-transform ease-out 200ms;

		&:hover {
			// way too laggy
			// width: @menuButtonSize * 1.2;
			// height: @menuButtonSize * 1.2;
			// line-height: @menuButtonSize * 1.2;
			
			// background: @dark-blue;
			color: @dark-blue;
		}
	}
	.menu-open-button:hover {
		.transform(scale(1.2, 1.2) translate3d(0, 0, 0));
	}

	.menu-open {
		display: none;
	}

	.hamburger {
		width: 25px;
		height: 3px;
		background: @light-blue;
		border-radius: 8px;
		display: block;
		.center();
		transition: transform 200ms, -webkit-transform 200ms;
	}

	.hamburgers(@hamburger) when (@hamburger > 0) {
		.hamburgers((@hamburger - 1));

		.hamburger-@{hamburger} {
			.transform(translate3d(0, -8px + (8 * (@hamburger - 1)), 0));
		}

	}
	.hamburgers(3);

	.menu-open:checked + .menu-open-button .hamburger-1 {
		-webkit-transform: translate3d(0, 0, 0) rotate(45deg);
		transform: translate3d(0, 0, 0) rotate(45deg);
	}

	.menu-open:checked + .menu-open-button .hamburger-2 {
		-webkit-transform: translate3d(0, 0, 0) scale(0.1, 1);
		transform: translate3d(0, 0, 0) scale(0.1, 1);
	}

	.menu-open:checked + .menu-open-button .hamburger-3 {
		-webkit-transform: translate3d(0, 0, 0) rotate(-45deg);
		transform: translate3d(0, 0, 0) rotate(-45deg);
	}

	.menu {
		position: absolute;
		width: 8888px;
		height: 8888px;
		box-sizing: border-box;
		font-size: 20px;
		text-align: left;
	}


	.menu-open-button {
		z-index: 2;
		.transition-timing( cubic-bezier(0.175, 0.885, 0.32, 1.275));
		.transition-duration(400ms);
		.transform( scale(1.1, 1.1) translate3d(0, 0, 0));
		cursor: pointer;
	}

	.menu-open:checked + .menu-open-button {
		.transition-timing(linear);
		.transition-duration(200ms);
		.transform(scale(0.8, 0.8) translate3d(0, 0, 0));
	}

	.menu-open:checked ~ .menu-item {
		.transition-timing(cubic-bezier(0.935, 0, 0.34, 1.33));
	}


	@radius: 169px;
	@menuItemCount: 5;
	@angle: (90deg / (@menuItemCount - 1)); // increase in angle for each menu item
	.openMenuItemsTransform(@counter) when (@counter > 2) { //starts at 3 because first menu item is third child
		.openMenuItemsTransform((@counter - 1)); // next iteration

		.menu-item:nth-child(@{counter}) {
			.transition-duration(70ms + ((@counter - 3) * 60)); // minus three ebcause starts at 3
		}

		.menu-open:checked ~ .menu-item:nth-child(@{counter}) {
			.transition-duration(160ms + ((@counter - 3) * 80)); // minus three ebcause starts at 3
			.transform(translate3d(-(abs(cos((@counter - 3) * @angle) * @radius)), -(abs(sin((@counter - 3) * @angle) * @radius)), 0)); //SOHCAHTOA
		}
	}
	.openMenuItemsTransform(@menuItemCount + 2);


	@media only screen and (min-width : 768px) {
		#action-button.show-action-button {
			right: -88px;
		}
	}
	@media only screen and (min-width : 1024px) {
		#action-button.show-action-button {
			right: -169px;
		}
	}
	@media only screen and (min-width : 1440px) {
		#action-button.show-action-button {
			right: -269px;
		}
	}
	@media only screen and (min-width : 2560px) {
		#action-button.show-action-button {
			right: -569px;
		}
	}

}

// why tf did this stop working
.open-menu-blur {
	.filter(blur(8px));
	// .filter(~"blur(8px) brightness(28%) opacity(88%)");
	// .transition(all .5s);
}
#box-container {
	.transition(all 1s);
}
:not(.open-menu-blur) {
	// -webkit-transition : -webkit-filter .3s linear
}

@media only screen and (max-width: 768px) and (max-height: 425px) {
	#action-button-container {
		position: relative;
		top: -24vh;
		left: -25vw;
	}
}
